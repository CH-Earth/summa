# Define core directory below which everything resides. This is the
# parent directory of the 'build' directory
# ROOT_DIR = 
F_MASTER = $(ROOT_DIR)/summa

#### Compilers ####
FC = gfortran
FC_EXE = gfortran

#### Includes AND Libraries ####
# INCLUDES =
# LDFLAGS  =
# LIBRARIES =

DIR_SUNDIALS= $(ROOT_DIR)/sundials/instdir
INC_SUNDIALS=-I$(DIR_SUNDIALS)/include -I$(DIR_SUNDIALS)/fortran
LIB_SUNDIALS=-L$(DIR_SUNDIALS)/lib64 -lsundials_fnvecmanyvector_mod -lsundials_fida_mod -lsundials_fnvecserial_mod -lsundials_fsunlinsoldense_mod -lsundials_fsunmatrixdense_mod

DIR_BMI= $(ROOT_DIR)/bmi/instdir
INC_BMI=-I$(DIR_BMI)/include
LIB_BMI=-L$(DIR_BMI)/lib -lbmif

# Production runs
FLAGS_NOAH = -O3 -ffree-form -ffree-line-length-none -fmax-errors=0 -fPIC -Wfatal-errors
FLAGS_COMM = -O3 -ffree-line-length-none -fmax-errors=0 -fPIC -Wfatal-errors
FLAGS_SUMMA = -O3 -ffree-line-length-none -fmax-errors=0 -fPIC -Wfatal-errors

# Debug runs
# FLAGS_NOAH = -g -O0 -ffree-form -ffree-line-length-none -fmax-errors=0 -fbacktrace -Wno-unused -Wno-unused-dummy-argument -fPIC
# FLAGS_COMM = -g -O0 -Wall -ffree-line-length-none -fmax-errors=0 -fbacktrace -fcheck=bounds -fPIC
# FLAGS_SUMMA = -g -O0 -Wall -ffree-line-length-none -fmax-errors=0 -fbacktrace -fcheck=bounds -fPIC

#========================================================================
# PART 1: Define directory paths
#========================================================================

# Core directory that contains source code
F_KORE_DIR = $(F_MASTER)/build/source

# Location of the compiled modules
MOD_PATH = $(F_MASTER)/build

# Define the directory for the executables
EXE_PATH = $(F_MASTER)/bin

#========================================================================
# PART 2: Assemble all of the SUMMA sub-routines
#========================================================================

# Define directories
DRIVER_DIR = $(F_KORE_DIR)/driver
HOOKUP_DIR = $(F_KORE_DIR)/hookup
NETCDF_DIR = $(F_KORE_DIR)/netcdf
DSHARE_DIR = $(F_KORE_DIR)/dshare
NUMREC_DIR = $(F_KORE_DIR)/numrec
NOAHMP_DIR = $(F_KORE_DIR)/noah-mp
ENGINE_DIR = $(F_KORE_DIR)/engine

#  utilities
SUMMA_NRUTIL= \
		nrtype.f90 \
		f2008funcs.f90 \
		nr_utility.f90
NRUTIL = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_NRUTIL))

#
# Numerical recipes procedures
# NOTE: all numerical recipes procedures are now replaced with free versions
SUMMA_NRPROC= \
      expIntegral.f90 \
      spline_int.f90
NRPROC = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_NRPROC))

# Hook-up modules (set files and directory paths)
SUMMA_HOOKUP= \
      ascii_util.f90 \
      summaFileManager.f90

HOOKUP = $(patsubst %, $(HOOKUP_DIR)/%, $(SUMMA_HOOKUP))

# Data modules
SUMMA_DATAMS= \
		multiconst.f90 \
		var_lookup.f90 \
		data_types.f90 \
		globalData.f90 \
		flxMapping.f90 \
		get_ixname.f90 \
		popMetadat.f90 \
		outpt_stat.f90
DATAMS = $(patsubst %, $(DSHARE_DIR)/%, $(SUMMA_DATAMS))

# utility modules
SUMMA_UTILMS= \
		time_utils.f90 \
		mDecisions.f90 \
		snow_utils.f90 \
		soil_utils.f90 \
      soil_utilsAddPrime.f90 \
		updatState.f90 \
      updatStateWithPrime.f90 \
		matrixOper.f90
UTILMS = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_UTILMS))

# Model guts
SUMMA_MODGUT= \
		MODGUT = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_MODGUT))

# Solver
SUMMA_SOLVER= \
		vegPhenlgy.f90 \
		diagn_evar.f90 \
		stomResist.f90 \
		groundwatr.f90 \
		vegSWavRad.f90 \
		vegNrgFlux.f90 \
		ssdNrgFlux.f90 \
		vegLiqFlux.f90 \
		snowLiqFlx.f90 \
		soilLiqFlx.f90 \
		bigAquifer.f90 \
		computFlux.f90 \
      type4ida.f90 \
      tol4ida.f90 \
      computEnthalpy.f90 \
      computHeatCap.f90 \
      computThermConduct.f90 \
		computResid.f90 \
		computJacob.f90 \
		eval8summa.f90 \
		summaSolve4numrec.f90 \
		systemSolv.f90 \
      computResidWithPrime.f90 \
      eval8summaWithPrime.f90 \
      computJacobWithPrime.f90 \
		computSnowDepth.f90 \
      summaSolve4ida.f90 \
      varSubstep.f90 \
		opSplittin.f90 \
		coupled_em.f90 \
		run_oneHRU.f90 \
		run_oneGRU.f90
SOLVER = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_SOLVER))

# Define routines for SUMMA preliminaries
SUMMA_PRELIM= \
		conv_funcs.f90 \
		sunGeomtry.f90 \
		convE2Temp.f90 \
		allocspace.f90 \
		checkStruc.f90 \
		childStruc.f90 \
		ffile_info.f90 \
		read_attrb.f90 \
		read_pinit.f90 \
		pOverwrite.f90 \
		read_param.f90 \
		paramCheck.f90 \
		check_icond.f90
PRELIM = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_PRELIM))

SUMMA_NOAHMP= \
		module_model_constants.F \
		module_sf_noahutl.F \
		module_sf_noahlsm.F \
		module_sf_noahmplsm.F
NOAHMP = $(patsubst %, $(NOAHMP_DIR)/%, $(SUMMA_NOAHMP))

# Define routines for the SUMMA model runs
SUMMA_MODRUN = \
      indexState.f90 \
      getVectorz.f90 \
      t2enthalpy.f90 \
      updateVars.f90 \
      updateVarsWithPrime.f90 \
		var_derive.f90 \
		read_force.f90 \
		derivforce.f90 \
		snowAlbedo.f90 \
		canopySnow.f90 \
		tempAdjust.f90 \
		snwCompact.f90 \
		layerMerge.f90 \
		layerDivide.f90 \
		volicePack.f90 \
		qTimeDelay.f90
MODRUN = $(patsubst %, $(ENGINE_DIR)/%, $(SUMMA_MODRUN))

# Define routines for the solver
SUMMA_MSOLVE = \

# Define NetCDF routines
SUMMA_NETCDF = \
		netcdf_util.f90 \
		def_output.f90 \
		modelwrite.f90 \
		read_icond.f90
NETCDF = $(patsubst %, $(NETCDF_DIR)/%, $(SUMMA_NETCDF))

# ... stitch together common programs
COMM_ALL = $(NRUTIL) $(NRPROC) $(HOOKUP) $(DATAMS) $(UTILMS)

# ... stitch together SUMMA programs
SUMMA_ALL = $(NETCDF) $(PRELIM) $(MODRUN) $(SOLVER)

# Define the driver routines
SUMMA_DRIVER= \
		summa_type.f90 \
		summa_util.f90 \
		summa_alarms.f90 \
		summa_globalData.f90 \
		summa_defineOutput.f90 \
		summa_init.f90 \
		summa_setup.f90 \
		summa_restart.f90 \
		summa_forcing.f90 \
		summa_modelRun.f90 \
		summa_writeOutput.f90 \
        summa_driver.f90
DRIVER = $(patsubst %, $(DRIVER_DIR)/%, $(SUMMA_DRIVER))

# Define SUMMA running infrastructure
SUMMA_RUN = \
		summa_run.f90
SUMMA = $(patsubst %, $(DRIVER_DIR)/%, $(SUMMA_RUN))

# Define BMI testing infrastructure
BMI_TEST = \
		summa_runBMI.f90
BMI = $(patsubst %, $(DRIVER_DIR)/%, $(BMI_TEST))

# Define the executable
DRIVER__EX = summa_sundials.exe
BMI__EX = summa_bmi.exe

# Define version number
VERSIONFILE = $(DRIVER_DIR)/summaversion.inc
VERSION = $(shell git tag | tail -n 1)
BULTTIM = $(shell date)
GITBRCH = $(shell git describe --long --all --always | sed -e's/heads\///')
GITHASH = $(shell git rev-parse HEAD)

#========================================================================
# PART 3: Checks
#======================================================================
# make sure that the paths are defined. These are just some high level checks
ifndef F_MASTER
 $(error F_MASTER is undefined)
endif
ifndef FC
 $(error FC is undefined: Specify your compiler)
endif
ifndef FC_EXE
 $(error FC_EXE is undefined: Specify your compiler executable)
endif
ifndef FLAGS_SUMMA
 $(error Specify flags for your compiler: $(FC))
endif
ifndef INCLUDES
 $(error INCLUDES is undefined)
endif
ifndef LIBRARIES
 $(error LIBRARIES is undefined)
endif

#========================================================================
# PART 4: compilation
#======================================================================

# Compile
all: compile_noah compile_comm compile_rout compile_test link_test clean_test compile_summa link clean install install_test
part: compile_noah compile_comm compile_rout
summa: compile_noah compile_comm compile_rout compile_summa link clean install
bmi: compile_noah compile_comm compile_rout compile_test link_test clean install_test


check:
	$(info)
	$(info Displaying make variables:)
	$(info   F_MASTER   : $(F_MASTER))
	$(info   EXE_PATH   : $(EXE_PATH))
	$(info   FC         : $(FC))
	$(info   INCLUDES   : $(INCLUDES))
	$(info   LIBRARIES  : $(LIBRARIES))
	$(info   FLAGS_NOAH : $(FLAGS_NOAH))
	$(info   FLAGS_COMM : $(FLAGS_COMM))
	$(info   FLAGS_SUMMA: $(FLAGS_SUMMA))
	$(info   SUNDIALSDIR: $(DIR_SUNDIALS))
	$(info   INC_SUNDIALS: $(INC_SUNDIALS))
	$(info   LIB_SUNDIALS: $(LIB_SUNDIALS))
	$(info   BMIDIR: $(DIR_BMI))
	$(info   INC_BMI: $(INC_BMI))
	$(info   LIB_BMI: $(LIB_BMI))
	$(info)

# update version information
update_version:
	echo "character(len=64), parameter     :: summaVersion = '${VERSION}'" > $(VERSIONFILE)
	echo "character(len=64), parameter     :: buildTime = '${BULTTIM}'" >> $(VERSIONFILE)
	echo "character(len=64), parameter     :: gitBranch = '${GITBRCH}'" >> $(VERSIONFILE)
	echo "character(len=64), parameter     :: gitHash = '${GITHASH}'" >> $(VERSIONFILE)

# compile common routines
compile_comm:
	$(FC_EXE) $(FLAGS_COMM) -c $(COMM_ALL) $(INCLUDES)

# compile Noah-MP routines
compile_noah:
	$(FC_EXE) $(FLAGS_NOAH) -c $(NRUTIL) $(NOAHMP)

# compile SUMMA routines
compile_rout: update_version
	$(FC_EXE) $(FLAGS_SUMMA) -c $(SUMMA_ALL) $(DRIVER) $(INCLUDES) $(INC_SUNDIALS) $(INC_BMI)

# compile run scripts
compile_summa: update_version
	$(FC_EXE) $(FLAGS_SUMMA) -c $(SUMMA)

# compile test scripts
compile_test: update_version
	$(FC_EXE) $(FLAGS_SUMMA) -c $(BMI)

# link run routines
link:
	$(FC_EXE) -g *.o $(LIBRARIES) $(LIB_SUNDIALS) $(LIB_BMI) -o $(DRIVER__EX)

# link test routines
link_test:
	$(FC_EXE) -g *.o $(LIBRARIES) $(LIB_SUNDIALS) $(LIB_BMI) -o $(BMI__EX)

# remove test script objects
clean_test:
	rm -f summa_runBMI.o

# Remove object files
clean:
	rm -f *.o
	rm -f *.mod
	rm -f soil_veg_gen_parm__genmod.f90

# Copy the executable to the bin directory
install:
	@mkdir -p $(EXE_PATH)
	@mv $(DRIVER__EX) $(EXE_PATH)
	$(info $(DRIVER__EX) successfully installed in $(EXE_PATH))

# Copy the executable to the bin directory
install_test:
	@mkdir -p $(EXE_PATH)
	@mv $(BMI__EX) $(EXE_PATH)
	$(info $(BMI__EX) successfully installed in $(EXE_PATH))
